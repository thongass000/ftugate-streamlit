import streamlit as st
import os
import requests
import json
import pandas as pd
from datetime import datetime
import time
from collections import defaultdict
import streamlit.components.v1 as components
import certifi

os.environ['HTTP_PROXY'] = 'http://113.160.132.195:8080'
os.environ['HTTPS_PROXY'] = 'http://113.160.132.195:8080'

# C·∫•u h√¨nh page
st.set_page_config(
    page_title="H·ªá th·ªëng QLDT - Danh s√°ch m√¥n h·ªçc",
    page_icon="üìö",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #2E86AB;
        margin-bottom: 30px;
    }
    .success-message {
        background-color: #D4EDDA;
        border: 1px solid #C3E6CB;
        color: #155724;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .error-message {
        background-color: #F8D7DA;
        border: 1px solid #F5C6CB;
        color: #721C24;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .course-card {
        background-color: #F8F9FA;
        border: 1px solid #DEE2E6;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# API functions - S·ª≠ d·ª•ng API th·ª±c t·∫ø c·ªßa FTUGate
class QLDTApi:
    def __init__(self):
        self.base_url = "https://ftugate.ftu.edu.vn"
        self.default_headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json, text/plain, */*',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
        }
    
    def _post(self, path, data=None, json=None, token=None, content_type=None):
        url = f"{self.base_url}{path}"
        headers = self.default_headers.copy()
        if token: headers['Authorization'] = f'Bearer {token}'
        if content_type: headers['Content-Type'] = content_type
        resp = requests.post(url, data=data, json=json, proxies={'http': 'http://113.160.132.195:8080','https': 'http://113.160.132.195:8080'}, headers=headers, verify=certifi.where())
        resp.raise_for_status()
        return resp.json()
    
    def login(self, username, password):
        """ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng QLDT"""
        return self._post(
            '/api/auth/login',
            data={'username':username, 'password':password, 'grant_type':'password'},
            content_type='application/x-www-form-urlencoded'
        )
    
    def get_registered_courses(self, token):
        """L·∫•y danh s√°ch m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω"""
        data = self._post(
            '/cq/hanoi/api/dkmh/w-locdskqdkmhsinhvien',
            json={'is_CVHT': False, 'is_Clear': True},
            token=token
        )
        
        courses = []
        
        # Ki·ªÉm tra n·∫øu data l√† string
        if isinstance(data, str):
            try:
                data = json.loads(data)
            except json.JSONDecodeError:
                return {
                    'courses': [],
                    'total_credits': 0,
                    'total_courses': 0,
                    'raw_data': {'raw_response': data},
                    'error': 'D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON'
                }
        
        # X·ª≠ l√Ω d·ªØ li·ªáu sau khi ƒë·∫£m b·∫£o ƒë√£ parse th√†nh object
        if isinstance(data, dict) and 'data' in data:
            data_section = data['data']
            
            # Ki·ªÉm tra n·∫øu c√≥ ds_kqdkmh trong data
            if 'ds_kqdkmh' in data_section and isinstance(data_section['ds_kqdkmh'], list):
                for course_record in data_section['ds_kqdkmh']:
                    if isinstance(course_record, dict) and 'to_hoc' in course_record:
                        to_hoc = course_record['to_hoc']
                        
                        # X·ª≠ l√Ω th·ªùi kh√≥a bi·ªÉu
                        tkb = to_hoc.get('tkb', '')
                        # T√°ch th√¥ng tin gi·∫£ng vi√™n t·ª´ tkb
                        lecturer = ''
                        if 'GV ' in tkb:
                            parts = tkb.split('GV ')
                            if len(parts) > 1:
                                lecturer_part = parts[1].split(',')[0]
                                lecturer = lecturer_part.strip()
                        
                        # T√°ch th√¥ng tin th·ªùi gian h·ªçc
                        schedule = ''
                        if tkb:
                            # L·∫•y ph·∫ßn ƒë·∫ßu ti√™n c·ªßa tkb ƒë·ªÉ hi·ªÉn th·ªã th·ªùi gian ch√≠nh
                            schedule_parts = tkb.split('<hr>')
                            if schedule_parts:
                                first_schedule = schedule_parts[0]
                                # T√°ch th√¥ng tin th·ª© v√† ti·∫øt
                                if 'ti·∫øt' in first_schedule:
                                    schedule = first_schedule.split(',GV')[0] if ',GV' in first_schedule else first_schedule
                        
                        course_info = {
                            'course_id': to_hoc.get('ma_mon', ''),
                            'course_name': to_hoc.get('ten_mon', ''),
                            'credits': int(to_hoc.get('so_tc', 0)) if to_hoc.get('so_tc', '').isdigit() else 0,
                            'lecturer': lecturer,
                            'schedule': schedule,
                            'room': '',  # Kh√¥ng c√≥ th√¥ng tin ph√≤ng h·ªçc r√µ r√†ng trong d·ªØ li·ªáu
                            'semester': '',  # C√≥ th·ªÉ l·∫•y t·ª´ ng√†y h·ªçc
                            'status': course_record.get('trang_thai_mon', ''),
                            'group_id': to_hoc.get('id_to_hoc', ''),
                            'class_name': to_hoc.get('lop', ''),
                            'week_schedule': tkb,  # L∆∞u to√†n b·ªô th·ªùi kh√≥a bi·ªÉu
                            'group_number': to_hoc.get('nhom_to', ''),
                            'registration_date': course_record.get('ngay_dang_ky', ''),
                            'english_name': to_hoc.get('ten_mon_eg', '').strip()
                        }
                        courses.append(course_info)
        
        return {
            'courses': courses,
            'total_credits': sum(course['credits'] for course in courses if isinstance(course['credits'], (int, float))),
            'total_courses': len(courses),
            'total_items': data_section.get('total_items', len(courses)),
            'min_credits': data_section.get('so_tin_chi_min', 0),
            'raw_data': data
        }
    
    def get_sections(self, token):
        """L·∫•y danh s√°ch nh√≥m t·ªï h·ªçc v√† danh s√°ch m√¥n trong h·ªçc k·ª≥"""
        data = self._post(
            '/cq/hanoi/api/dkmh/w-locdsnhomto',
            json={
                'is_CVHT': False,
                'additional': {
                    'paging': {'limit': 99999, 'page': 1},
                    'ordering': [{'name': '', 'order_type': ''}]
                }
            },
            token=token
        )
        return {
            'ds_nhom_to': data.get('data', {}).get('ds_nhom_to', []),
            'ds_mon_hoc': data.get('data', {}).get('ds_mon_hoc', [])
        }
    
    def register_course(self, token, id_to_hoc):
        """ƒêƒÉng k√Ω m·ªôt m√¥n h·ªçc"""
        return self._post(
            '/cq/hanoi/api/dkmh/w-xulydkmhsinhvien',
            json={'filter': {'id_to_hoc': id_to_hoc, 'is_checked': True, 'sv_nganh': 1}},
            token=token
        )
    
    def logout(self, token):
        """ƒêƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng"""
        try:
            return self._post('/api/auth/logout', json={}, token=token)
        except:
            return {'success': True, 'message': 'Logged out (token may have expired)'}

# Kh·ªüi t·∫°o API
api = QLDTApi()

# Kh·ªüi t·∫°o session state g·ªçn h∆°n
for k,v in {'logged_in': False, 'user_info': None, 'token': None, 'courses_data': None}.items():
    st.session_state.setdefault(k, v)

# Header ch√≠nh
st.markdown('<h1 class="main-header">üéì H·ªá th·ªëng Qu·∫£n l√Ω ƒê√†o t·∫°o - Danh s√°ch m√¥n h·ªçc</h1>', 
            unsafe_allow_html=True)

# Sidebar cho ƒëƒÉng nh·∫≠p
with st.sidebar:
    st.header("üîê ƒêƒÉng nh·∫≠p")
    
    # Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi
    st.write("**Tr·∫°ng th√°i:** üü¢ K·∫øt n·ªëi API th·ª±c")
    st.write("**Server:** ftugate.ftu.edu.vn")
    
    if not st.session_state.logged_in:
        with st.form("login_form"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p:")
            password = st.text_input("M·∫≠t kh·∫©u:", type="password")
            login_button = st.form_submit_button("ƒêƒÉng nh·∫≠p")
        
        if login_button:
            if username and password:
                try:
                    with st.spinner("ƒêang ƒëƒÉng nh·∫≠p..."):
                        login_data = api.login(username, password)
                        st.session_state.logged_in = True
                        st.session_state.user_info = login_data
                        st.session_state.token = login_data["access_token"]
                        # Parse 'logtime' from API response
                        logtime_str = login_data.get("logtime", "")
                        try:
                            logtime_parsed = datetime.strptime(logtime_str, "%y%m%d%H%M%S")
                            st.session_state.login_time = logtime_parsed.strftime("%Y-%m-%d %H:%M:%S")
                            st.session_state.token_expiry_ts = int(logtime_parsed.timestamp()) + login_data["expires_in"]
                        except ValueError:
                            st.session_state.login_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            st.session_state.token_expiry_ts = int(time.time()) + login_data["expires_in"]
                        st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                        time.sleep(1)
                        st.rerun()
                except Exception as e:
                    st.error(f"L·ªói ƒëƒÉng nh·∫≠p: {str(e)}")
            else:
                st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
    else:
        user_info = st.session_state.user_info
        st.success(f"Xin ch√†o {user_info.get('name', user_info.get('username', 'N/A'))}!")
        
        # Hi·ªÉn th·ªã th√¥ng tin user t·ª´ API
        if 'username' in user_info:
            st.write(f"**T√™n ƒëƒÉng nh·∫≠p:** {user_info['username']}")
        if 'name' in user_info:
            st.write(f"**H·ªç t√™n:** {user_info['name']}")
        if 'student_id' in user_info:
            st.write(f"**M√£ SV:** {user_info['student_id']}")
        if "token_expiry_ts" in st.session_state:
            if "token_expiry_ts" in st.session_state:
                components.html(f"""
                    <html>
                    <head>
                        <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap" rel="stylesheet">
                        <style>
                            body {{
                                margin: 0;
                                padding: 0;
                                font-family: 'Source Sans Pro', sans-serif;
                            }}
                            #countdown-container {{
                                font-size: 16px;
                                font-weight: 600;
                                color: #32CD32;
                                # margin-top: 10px;
                                text-align: left;
                                padding-left: 0;
                            }}
                        </style>
                    </head>
                    <body>
                        <div id="countdown-container">
                            <span>Token c√≤n l·∫°i:</span>
                            <span id="countdown" style="font-family: 'Source Sans Pro', sans-serif;">--:--</span>
                        </div>
                        <script>
                            function updateCountdown() {{
                                var expiry = {st.session_state.token_expiry_ts} * 1000;
                                var now = new Date().getTime();
                                var distance = expiry - now;

                                var countdownEl = document.getElementById("countdown");

                                if (distance <= 0) {{
                                    countdownEl.innerHTML = "H·∫øt h·∫°n";
                                    countdownEl.style.color = "red";
                                    clearInterval(x);
                                    return;
                                }}

                                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                                var seconds = Math.floor((distance % (1000 * 60)) / 1000);
                                countdownEl.innerHTML =
                                    ("0" + minutes).slice(-2) + ":" + ("0" + seconds).slice(-2);
                            }}

                            updateCountdown();
                            var x = setInterval(updateCountdown, 1000);
                        </script>
                    </body>
                    </html>
                """, height=40)
        
        if st.button("ƒêƒÉng xu·∫•t"):
            try:
                with st.spinner("ƒêang ƒëƒÉng xu·∫•t..."):
                    api.logout(st.session_state.token)
                    st.session_state.logged_in = False
                    st.session_state.user_info = None
                    st.session_state.token = None
                    st.session_state.courses_data = None
                    if 'login_time' in st.session_state:
                        del st.session_state.login_time
                    st.success("ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")
                    time.sleep(1)
                    st.rerun()
            except Exception as e:
                st.error(f"L·ªói ƒëƒÉng xu·∫•t: {str(e)}")
                # V·∫´n x√≥a session state ngay c·∫£ khi ƒëƒÉng xu·∫•t l·ªói
                st.session_state.logged_in = False
                st.session_state.user_info = None
                st.session_state.token = None
                st.session_state.courses_data = None
                if 'login_time' in st.session_state:
                    del st.session_state.login_time

# Main content
if st.session_state.logged_in:
    st.markdown("---")
    
    # N√∫t t·∫£i danh s√°ch m√¥n h·ªçc
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üìã T·∫£i danh s√°ch m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω", use_container_width=True):
            try:
                with st.spinner("ƒêang t·∫£i danh s√°ch m√¥n h·ªçc..."):
                    courses_data = api.get_registered_courses(st.session_state.token)
                    st.session_state.courses_data = courses_data
                    st.rerun()
            except Exception as e:
                st.error(f"L·ªói t·∫£i danh s√°ch: {str(e)}")
    
    # Hi·ªÉn th·ªã danh s√°ch m√¥n h·ªçc
    if st.session_state.courses_data:
        st.markdown("---")
        st.header("üìö Danh s√°ch m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω")
        
        # Ki·ªÉm tra n·∫øu c√≥ l·ªói
        if 'error' in st.session_state.courses_data:
            st.error(f"L·ªói: {st.session_state.courses_data['error']}")
            st.write("**D·ªØ li·ªáu Raw ƒë·ªÉ debug:**")
            st.json(st.session_state.courses_data.get('raw_data', {}))
            st.stop()
        
        # Th·ªëng k√™ t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng s·ªë m√¥n h·ªçc", st.session_state.courses_data["total_courses"])
        with col2:
            st.metric("T·ªïng s·ªë t√≠n ch·ªâ", st.session_state.courses_data["total_credits"])
        with col3:
            if 'total_items' in st.session_state.courses_data:
                st.metric("T·ªïng items", st.session_state.courses_data["total_items"])
            else:
                st.metric("H·ªçc k·ª≥", "2024.1")
        with col4:
            if 'min_credits' in st.session_state.courses_data:
                st.metric("T√≠n ch·ªâ t·ªëi thi·ªÉu", st.session_state.courses_data["min_credits"])
            else:
                st.metric("Tr·∫°ng th√°i", "ƒêang h·ªçc")
        
        st.markdown("---")
        
        # Hi·ªÉn th·ªã t·ª´ng m√¥n h·ªçc
        courses = st.session_state.courses_data["courses"]
        
        if courses:
            for i, course in enumerate(courses, 1):
                with st.expander(f"üìñ {course['course_id']} - {course['course_name']}", expanded=True):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**M√£ m√¥n h·ªçc:** {course['course_id']}")
                        st.write(f"**T√™n m√¥n h·ªçc:** {course['course_name']}")
                        if course.get('english_name'):
                            st.write(f"**T√™n ti·∫øng Anh:** {course['english_name']}")
                        st.write(f"**S·ªë t√≠n ch·ªâ:** {course['credits']}")
                        st.write(f"**Tr·∫°ng th√°i:** {course['status']}")
                        if course.get('group_number'):
                            st.write(f"**Nh√≥m:** {course['group_number']}")
                        if course.get('registration_date'):
                            st.write(f"**Ng√†y ƒëƒÉng k√Ω:** {course['registration_date']}")
                    
                    with col2:
                        st.write(f"**Gi·∫£ng vi√™n:** {course['lecturer']}")
                        st.write(f"**Th·ªùi gian:** {course['schedule']}")
                        if course.get('room'):
                            st.write(f"**Ph√≤ng h·ªçc:** {course['room']}")
                        if course.get('class_name'):
                            st.write(f"**L·ªõp:** {course['class_name']}")
                        if course.get('group_id'):
                            st.write(f"**M√£ nh√≥m:** {course['group_id']}")
                    
                    # Hi·ªÉn th·ªã th·ªùi kh√≥a bi·ªÉu chi ti·∫øt
                    if course.get('week_schedule'):
                        st.write("**Th·ªùi kh√≥a bi·ªÉu chi ti·∫øt:**")
                        schedule_parts = course['week_schedule'].split('<hr>')
                        for part in schedule_parts:
                            if part.strip():
                                st.write(f"‚Ä¢ {part.strip()}")
        else:
            st.info("Kh√¥ng c√≥ m√¥n h·ªçc n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªçc k·ª≥ n√†y.")

        # Ensure session states
        st.session_state.setdefault("selected_classes", [])
        st.session_state.setdefault("available_sections", [])

        # Automatically load class list and fill in ten_mon
        if not st.session_state.available_sections:
            with st.spinner("ƒêang t·∫£i danh s√°ch l·ªõp..."):
                try:
                    section_data = api.get_sections(st.session_state.token)
                    ds_nhom_to = section_data.get("ds_nhom_to", [])
                    ds_mon_hoc = section_data.get("ds_mon_hoc", [])
                    mon_dict = {m["ma"].strip(): m["ten"] for m in ds_mon_hoc if m.get("ma") and m.get("ten")}
                    for nhom in ds_nhom_to:
                        ma_mon = nhom.get("ma_mon", "").strip()
                        nhom["ten_mon"] = mon_dict.get(ma_mon, "")
                    st.session_state.available_sections = ds_nhom_to
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i danh s√°ch l·ªõp: {str(e)}")

        st.markdown("---")
        st.subheader("üìù ƒêƒÉng k√Ω l·ªõp t√≠n ch·ªâ")

        # Live search
        search_query = st.text_input("üîç T√¨m l·ªõp h·ªçc (m√£ m√¥n, t√™n m√¥n ho·∫∑c nh√≥m):")

        if len(search_query.strip()) >= 3:
            query = search_query.lower()
            groups = defaultdict(lambda: defaultdict(list))

            for s in st.session_state.available_sections:
                combined = f"{s.get('ma_mon', '')} {s.get('ten_mon', '')} {s.get('nhom_to', '')}".lower()
                if query in combined:
                    ten_mon = s.get('ten_mon', 'Kh√¥ng r√µ')
                    ma_mon = s.get('ma_mon', 'N/A')
                    groups[ten_mon][ma_mon].append(s)

            for ten_mon, ma_mon_dict in list(groups.items())[:5]:
                with st.expander(f"üìö {ten_mon}", expanded=False):
                    for ma_mon, sections in ma_mon_dict.items():
                        with st.expander(f"üìò {ma_mon}", expanded=False):
                            for s in sections:
                                label = f"{s['ma_mon']} - {ten_mon} (Nh√≥m {s['nhom_to']})"
                                already_selected = any(cls['label'] == label for cls in st.session_state.selected_classes)
                                if not already_selected:
                                    if st.button(f"‚ûï {label}", key=f"add_{s['id_to_hoc']}"):
                                        st.session_state.selected_classes.append({'id': s['id_to_hoc'], 'label': label})
        else:
            if search_query:
                st.warning("Vui l√≤ng nh·∫≠p √≠t nh·∫•t 3 k√Ω t·ª± ƒë·ªÉ t√¨m l·ªõp.")

        # Show selected classes (cart)
        if st.session_state.selected_classes:
            st.markdown("### üõí L·ªõp ƒë√£ ch·ªçn:")
            for i, cls in enumerate(st.session_state.selected_classes):
                col1, col2 = st.columns([6, 1])
                with col1:
                    st.markdown(f"- {cls['label']}")
                with col2:
                    if st.button("‚ùå", key=f"remove_{i}"):
                        st.session_state.selected_classes.pop(i)
                        st.session_state["rerun_flag"] = True
                        break

            if st.button("‚úÖ ƒêƒÉng k√Ω t·∫•t c·∫£ l·ªõp ƒë√£ ch·ªçn"):
                with st.spinner("ƒêang th·ª±c hi·ªán ƒëƒÉng k√Ω..."):
                    success, fail = 0, 0
                    failed_labels = []  # <-- define this
                    for cls in st.session_state.selected_classes:
                        try:
                            result = api.register_course(st.session_state.token, cls['id'])
                            if result.get("data", {}).get("is_thanh_cong"):
                                st.success(f"‚úÖ {cls['label']}")
                                success += 1
                            else:
                                st.error(f"‚ùå {cls['label']}: {result.get('data', {}).get('thong_bao_loi', 'Kh√¥ng r√µ l·ªói')}")
                                fail += 1
                                failed_labels.append(cls['label'])
                        except Exception as e:
                            st.error(f"‚ö†Ô∏è {cls['label']}: {str(e)}")
                            fail += 1
                            failed_labels.append(cls['label'])
                    st.info(f"Ho√†n t·∫•t: {success} th√†nh c√¥ng, {fail} th·∫•t b·∫°i.")
                    st.session_state.selected_classes = [
                        cls for cls in st.session_state.selected_classes
                        if cls['label'] in failed_labels
                    ]

        # Rerun handler
        if st.session_state.get("rerun_flag"):
            del st.session_state["rerun_flag"]
            st.rerun()


        # Xu·∫•t d·ªØ li·ªáu
        st.markdown("---")
        st.subheader("üìä Xu·∫•t d·ªØ li·ªáu")
        
        # T·∫°o tabs cho c√°c ch·ª©c nƒÉng kh√°c nhau
        tab1, tab2, tab3 = st.tabs(["üìã B·∫£ng d·ªØ li·ªáu", "üì• T·∫£i xu·ªëng", "üîç D·ªØ li·ªáu Raw"])
        
        with tab1:
            # Hi·ªÉn th·ªã b·∫£ng
            if courses:
                df = pd.DataFrame(courses)
                st.dataframe(df, use_container_width=True)
            else:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
        
        with tab2:
            if courses:
                df = pd.DataFrame(courses)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # N√∫t download CSV
                    csv = df.to_csv(index=False, encoding='utf-8-sig')
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng CSV",
                        data=csv,
                        file_name=f"danh_sach_mon_hoc_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv",
                        use_container_width=True
                    )
                
                with col2:
                    # Xu·∫•t JSON
                    json_data = json.dumps(st.session_state.courses_data, 
                                         ensure_ascii=False, indent=2)
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng JSON",
                        data=json_data,
                        file_name=f"danh_sach_mon_hoc_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json",
                        use_container_width=True
                    )
            else:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫£i xu·ªëng")
        
        with tab3:
            st.write("**D·ªØ li·ªáu Raw t·ª´ API:**")
            if 'raw_data' in st.session_state.courses_data:
                st.json(st.session_state.courses_data['raw_data'])
            else:
                st.json(st.session_state.courses_data)

else:
    # Hi·ªÉn th·ªã th√¥ng b√°o khi ch∆∞a ƒëƒÉng nh·∫≠p
    st.info("üëà Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem danh s√°ch m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω")
    
    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    st.markdown("---")
    st.subheader("üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    st.write("1. **ƒêƒÉng nh·∫≠p:** Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u FTUGate v√†o sidebar")
    st.write("2. **X√°c th·ª±c:** Nh·∫•n n√∫t 'ƒêƒÉng nh·∫≠p' ƒë·ªÉ k·∫øt n·ªëi t·ªõi server th·ª±c")
    st.write("3. **T·∫£i d·ªØ li·ªáu:** Sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng, nh·∫•n 'T·∫£i danh s√°ch m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω'")
    st.write("4. **Xem th√¥ng tin:** Xem th√¥ng tin chi ti·∫øt t·ª´ng m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω")
    st.write("5. **Xu·∫•t d·ªØ li·ªáu:** S·ª≠ d·ª•ng c√°c tab ƒë·ªÉ xem b·∫£ng, t·∫£i xu·ªëng CSV/JSON, ho·∫∑c xem d·ªØ li·ªáu Raw")
    
    st.markdown("---")
    st.subheader("‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng")
    st.warning("üîí ·ª®ng d·ª•ng n√†y k·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi server FTUGate. Vui l√≤ng s·ª≠ d·ª•ng t√†i kho·∫£n th·ª±c c·ªßa b·∫°n.")
    st.info("üîÑ N·∫øu g·∫∑p l·ªói ƒëƒÉng nh·∫≠p, vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin t√†i kho·∫£n ho·∫∑c th·ª≠ l·∫°i sau.")
    st.info("‚è±Ô∏è Token ƒëƒÉng nh·∫≠p c√≥ th·ªÉ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i n·∫øu c·∫ßn thi·∫øt.")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666; padding: 20px;'>
        <p>üéì H·ªá th·ªëng Qu·∫£n l√Ω ƒê√†o t·∫°o - Phi√™n b·∫£n 1.0</p>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn b·∫±ng Streamlit</p>
    </div>
    """, 
    unsafe_allow_html=True
)